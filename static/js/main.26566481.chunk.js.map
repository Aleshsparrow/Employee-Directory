{"version":3,"sources":["components/Search.js","components/Navbar.js","utils/API.js","components/Cards.js","pages/Employees.js","App.js","serviceWorker.js","index.js"],"names":["Search","className","type","placeholder","aria-label","Navbar","href","data-toggle","data-target","aria-controls","aria-expanded","axios","get","Cards","table","result","API","then","res","data","results","i","length","push","console","log","index","src","alt","class","Employees","state","image","name","email","phone","loadAll","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"0OAYeA,MAVf,WACA,OACI,0BAAMC,UAAU,4BACd,2BAAOA,UAAU,uBAAuBC,KAAK,SAASC,YAAY,SAASC,aAAW,WACtF,4BAAQH,UAAU,uCAAuCC,KAAK,UAA9D,YCSSG,MAZf,WACI,OACI,yBAAKJ,UAAU,gDACX,uBAAGA,UAAU,eAAeK,KAAK,KAAjC,sBACA,4BAAQL,UAAU,iBAAiBC,KAAK,SAASK,cAAY,WAAWC,cAAY,0BAA0BC,gBAAc,yBAAyBC,gBAAc,QAAQN,aAAW,qBAClL,0BAAMH,UAAU,yBAEpB,kBAAC,EAAD,Q,wDCNG,EACG,WACd,OAAOU,IAAMC,IAAI,mDC+BNC,MAjCf,WACI,IAAIC,EAAQ,GACRC,EAAS,GACbC,IAAqBC,MAAK,SAAAC,GAEtB,IADA,IAAMC,EAAOD,EAAIC,KAAKC,QACbC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,IAE7BN,EAAOQ,KAAKJ,EAAKE,IAErBG,QAAQC,IAAIV,MAEZ,IAAK,IAAIW,EAAQ,EAAGA,EAAQ,GAAIA,IAC5BZ,EAAMS,KAAK,yBAAKtB,UAAU,aAC1B,yBAAKA,UAAU,kBACX,yBAAKA,UAAU,YACX,yBAAK0B,IAAI,MAAM1B,UAAU,WAAW2B,IAAI,SAE5C,yBAAK3B,UAAU,YACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,eACd,uBAAGA,UAAU,aAAb,oIACA,uBAAGA,UAAU,aAAY,2BAAO4B,MAAM,cAAb,iCAOrC,OACIf,GCIDgB,E,2MAhCXC,MAAQ,CACJC,MAAO,GACPC,KAAM,GACNC,MAAO,GACPC,MAAO,I,EAOXC,QAAU,WACNpB,IAAqBC,MAAK,SAAAC,GAEtB,IADA,IAAMC,EAAOD,EAAIC,KAAKC,QACbC,EAAI,EAAGA,EAAIF,EAAKG,OAAQD,U,mFANrCgB,KAAKD,Y,+BAkBG,OACI,kBAAC,EAAD,U,GA5BIE,aCSTC,MATf,WACE,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlC,MAAK,SAAAmC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/B,QAAQ+B,MAAMA,EAAMC,c","file":"static/js/main.26566481.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search (){\r\nreturn (\r\n    <form className=\"form-inline my-2 my-lg-0\">\r\n      <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n      <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\r\n    </form>\r\n    )\r\n\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport Search from './Search'\r\n\r\nfunction Navbar() {\r\n    return (\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-dark\">\r\n            <a className=\"navbar-brand\" href=\"#\">Employee Directory</a>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <Search/>\r\n        </nav>\r\n        )\r\n}\r\n\r\nexport default Navbar","import axios from \"axios\";\n\n// Export an object containing methods we'll use for accessing the Dog.Ceo API\n\nexport default {\n  getAllEmployee: function() {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us/\");\n  },\n  getSeacrhedEmployee: function(name) {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us/\" + name);\n  }\n};\n","import React from 'react';\r\nimport API from \"../utils/API\";\r\n\r\n\r\nfunction Cards() {\r\n    let table = []\r\n    let result = []\r\n    API.getAllEmployee().then(res =>{\r\n        const data = res.data.results;\r\n        for (let i = 0; i < data.length; i++) {\r\n            // console.log(data[i])\r\n            result.push(data[i])\r\n        }\r\n        console.log(result)\r\n        })\r\n        for (let index = 0; index < 20; index++) {        \r\n            table.push(<div className=\"card mb-3\">\r\n            <div className=\"row no-gutters\">\r\n                <div className=\"col-md-4\">\r\n                    <img src=\"...\" className=\"card-img\" alt=\"...\" />\r\n                </div>\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"card-body\">\r\n                        <h5 className=\"card-title\"></h5>\r\n                        <p className=\"card-text\">This is a wider card with supporting text below as a natural lead-in to additional content. This content is a little bit longer.</p>\r\n                        <p className=\"card-text\"><small class=\"text-muted\">Last updated 3 mins ago</small></p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>)\r\n        }\r\n\r\n            return(\r\n                table\r\n            )\r\n}\r\n\r\nexport default Cards;","import React, { Component } from \"react\";\r\nimport API from \"../utils/API\";\r\nimport Cards from \"../components/Cards\"\r\n\r\nclass Employees extends Component{\r\n    state = {\r\n        image: \"\",\r\n        name: \"\",\r\n        email: \"\",\r\n        phone: \"\"\r\n    };\r\n\r\n    componentDidMount(){\r\n        this.loadAll()\r\n    }\r\n\r\n    loadAll = () => {\r\n        API.getAllEmployee().then(res =>{\r\n            const data = res.data.results;\r\n            for (let i = 0; i < data.length; i++) {\r\n                // console.log(data[i])\r\n            }\r\n                    \r\n        })\r\n    }\r\n\r\n    render(){\r\n        // let table = []\r\n        // for (let i = 0; i < 8; i++) {\r\n            // table.push(<Cards/>)\r\n        // }\r\n                return(\r\n                    <Cards/>\r\n                )\r\n    }\r\n}\r\n\r\nexport default Employees","import React from 'react';\nimport Navbar from './components/Navbar';\nimport Employee from \"./pages/Employees\"\n\nfunction App() {\n  return (\n    <div>\n      <Navbar/>\n      <Employee/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}